/** Declaration file generated by dts-gen */

export = request_promise_cache;

declare function request_promise_cache(params: any): any;

declare namespace request_promise_cache {
    const loading: {
    };

    const prototype: {
    };

    function defaults(defaults: any): any;

    function original(uri: any, options: any, callback: any): any;

    function use(CustomPromise: any): any;

    namespace cache {
        const bytes: number;

        const evictions: number;

        const hits: number;

        const misses: number;

        const options: {
            bytes: number;
            compress: boolean;
            limit: any;
            maxEvictBytes: number;
            minFreeMem: number;
            ttl: any;
        };

        function addListener(type: any, listener: any): any;

        function asyncExpireCheck(): void;

        function clear(): void;

        function clearExpired(): void;

        function del(key: any): any;

        function emit(type: any, args: any): any;

        function eventNames(): any;

        function get(key: any): any;

        function getMaxListeners(): any;

        function info(key: any): any;

        function init(opt: any): void;

        function isExpired(key: any): any;

        function isLimitReached(key: any): any;

        function isTTLExpired(key: any): any;

        function listenerCount(type: any): any;

        function listeners(type: any): any;

        function now(): any;

        function off(type: any, listener: any): any;

        function on(type: any, listener: any): any;

        function once(type: any, listener: any): any;

        function prependListener(type: any, listener: any): any;

        function prependOnceListener(type: any, listener: any): any;

        function rawListeners(type: any): any;

        function removeAllListeners(type: any, ...args: any[]): any;

        function removeListener(type: any, listener: any): any;

        function set(key: any, value: any, options: any): any;

        function setMaxListeners(n: any): any;

        function stats(): any;

        namespace addListener {
            const prototype: {
            };

        }

        namespace asyncExpireCheck {
            const prototype: {
            };

        }

        namespace clear {
            const prototype: {
            };

        }

        namespace clearExpired {
            const prototype: {
            };

        }

        namespace del {
            const prototype: {
            };

        }

        namespace emit {
            const prototype: {
            };

        }

        namespace eventNames {
            const prototype: {
            };

        }

        namespace get {
            const prototype: {
            };

        }

        namespace getMaxListeners {
            const prototype: {
            };

        }

        namespace info {
            const prototype: {
            };

        }

        namespace init {
            const prototype: {
            };

        }

        namespace isExpired {
            const prototype: {
            };

        }

        namespace isLimitReached {
            const prototype: {
            };

        }

        namespace isTTLExpired {
            const prototype: {
            };

        }

        namespace listenerCount {
            const prototype: {
            };

        }

        namespace listeners {
            const prototype: {
            };

        }

        namespace now {
            const prototype: {
            };

        }

        namespace off {
            const prototype: {
            };

        }

        namespace on {
            const prototype: {
            };

        }

        namespace once {
            const prototype: {
            };

        }

        namespace prependListener {
            const prototype: {
            };

        }

        namespace prependOnceListener {
            const prototype: {
            };

        }

        namespace rawListeners {
            const prototype: {
            };

        }

        namespace removeAllListeners {
            const prototype: {
            };

        }

        namespace removeListener {
            const prototype: {
            };

        }

        namespace set {
            const prototype: {
            };

        }

        namespace setMaxListeners {
            const prototype: {
            };

        }

        namespace stats {
            const prototype: {
            };

        }

    }

    namespace defaults {
        const prototype: {
        };

    }

    namespace original {
        class Request {
            constructor(options: any);

            abort(): void;

            auth(user: any, pass: any, sendImmediately: any, bearer: any): any;

            aws(opts: any, now: any): any;

            debug(...args: any[]): void;

            destroy(): void;

            enableUnixSocket(): void;

            end(chunk: any): void;

            form(form: any): any;

            getHeader(name: any, headers: any): any;

            getNewAgent(): any;

            hawk(opts: any): void;

            httpSignature(opts: any): any;

            init(options: any, ...args: any[]): any;

            jar(jar: any): any;

            json(val: any): any;

            multipart(multipart: any): any;

            oauth(_oauth: any): any;

            onRequestError(error: any): void;

            onRequestResponse(response: any): any;

            pause(...args: any[]): void;

            pipe(dest: any, opts: any): any;

            pipeDest(dest: any): void;

            qs(q: any, clobber: any): any;

            readResponseBody(response: any): void;

            resume(...args: any[]): void;

            start(): void;

            toJSON(): any;

            write(...args: any[]): any;

            static debug: any;

            static defaultProxyHeaderExclusiveList: string[];

            static defaultProxyHeaderWhiteList: string[];

        }

        const debug: any;

        const prototype: {
        };

        function cookie(str: any): any;

        function defaults(options: any, requester: any): any;

        function del(uri: any, options: any, callback: any): any;

        function forever(agentOptions: any, optionsArg: any): any;

        function get(uri: any, options: any, callback: any): any;

        function head(uri: any, options: any, callback: any): any;

        function initParams(uri: any, options: any, callback: any): any;

        function jar(store: any): any;

        function options(uri: any, options: any, callback: any): any;

        function patch(uri: any, options: any, callback: any): any;

        function post(uri: any, options: any, callback: any): any;

        function put(uri: any, options: any, callback: any): any;

        namespace Request {

        }

        namespace cookie {
            const prototype: {
            };

        }

        namespace defaults {
            const prototype: {
            };

        }

        namespace del {
            const prototype: {
            };

        }

        namespace forever {
            const prototype: {
            };

        }

        namespace get {
            const prototype: {
            };

        }

        namespace head {
            const prototype: {
            };

        }

        namespace initParams {
            const prototype: {
            };

        }

        namespace jar {
            const prototype: {
            };

        }

        namespace options {
            const prototype: {
            };

        }

        namespace patch {
            const prototype: {
            };

        }

        namespace post {
            const prototype: {
            };

        }

        namespace put {
            const prototype: {
            };

        }

    }

    namespace use {
        const prototype: {
        };

    }

}

